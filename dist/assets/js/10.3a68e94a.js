(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{363:function(t,a,s){"use strict";s.r(a);var r=s(42),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"js单线程和event-loop"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#js单线程和event-loop"}},[t._v("#")]),t._v(" JS单线程和Event loop")]),t._v(" "),s("h4",{attrs:{id:"原因-避免dom渲染冲突"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原因-避免dom渲染冲突"}},[t._v("#")]),t._v(" 原因——避免DOM渲染冲突")]),t._v(" "),s("ul",[s("li",[t._v("浏览器需要渲染DOM")]),t._v(" "),s("li",[t._v("JS可以修改DOM结构")]),t._v(" "),s("li",[t._v("JS执行的时候，浏览器DOM会暂停")]),t._v(" "),s("li",[t._v("两段JS也不能同时执行(都修改DOM就冲突)")]),t._v(" "),s("li",[t._v("webworker支持多线程，但是不能访问DOM")])]),t._v(" "),s("h4",{attrs:{id:"解决方案-异步"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解决方案-异步"}},[t._v("#")]),t._v(" 解决方案——异步")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("setTimeout "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 时间到了再执行")]),t._v("\najax "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 加载完再执行")]),t._v("\n")])])]),s("h4",{attrs:{id:"异步问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#异步问题"}},[t._v("#")]),t._v(" 异步问题")]),t._v(" "),s("ul",[s("li",[t._v("没按照书写方式执行，可读性差")]),t._v(" "),s("li",[t._v("callback中不容易模块化")])]),t._v(" "),s("h4",{attrs:{id:"实现异步的方案-event-loop"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实现异步的方案-event-loop"}},[t._v("#")]),t._v(" 实现异步的方案——Event Loop")]),t._v(" "),s("ul",[s("li",[t._v("事件轮询，JS实现异步的具体解决方案")]),t._v(" "),s("li",[t._v("同步代码，直接执行")]),t._v(" "),s("li",[t._v("异步函数先放在异步队列中")]),t._v(" "),s("li",[t._v("待同步函数执行完毕，轮询执行异步队列的函数")])]),t._v(" "),s("h4",{attrs:{id:"异步任务中的分类-宏任务和微任务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#异步任务中的分类-宏任务和微任务"}},[t._v("#")]),t._v(" 异步任务中的分类——宏任务和微任务")]),t._v(" "),s("h5",{attrs:{id:"宏任务-script、-settimeout、setinterval、ajax、requrestanimationframe"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#宏任务-script、-settimeout、setinterval、ajax、requrestanimationframe"}},[t._v("#")]),t._v(" 宏任务: script、 setTimeout、setInterval、ajax、requrestAnimationFrame")]),t._v(" "),s("ol",[s("li",[t._v("宏任务所处的队列就是宏任务队列")]),t._v(" "),s("li",[t._v("第一个宏任务队列中只有一个任务：执行主线程的js代码")]),t._v(" "),s("li",[t._v("宏任务队列可以有多个")]),t._v(" "),s("li",[t._v("当宏任务队列中的任务全部执行完以后会查看是否有微任务队列，如果有，先执行微任务队列中的所有任务。如果没有就查看是否有宏任务队列。")])]),t._v(" "),s("h5",{attrs:{id:"微任务-promise-then-回调-、process-nexttick-node中"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#微任务-promise-then-回调-、process-nexttick-node中"}},[t._v("#")]),t._v(" 微任务: Promise().then(回调)、process.nextTick(node中)")]),t._v(" "),s("ol",[s("li",[t._v("微任务所处的队列就是微任务队列")]),t._v(" "),s("li",[t._v("只有一个微任务队列")]),t._v(" "),s("li",[t._v("在上一个宏任务队列执行完毕后如果有微任务队列就执行微任务队列中所有任务")])]),t._v(" "),s("h4",{attrs:{id:"总结-js是单线程-同时只做一件事-原因是为了避免dom渲染冲突。异步是一种解决方案-具体的实现就是event-loop。同步代码直接执行-异步代码先放在异步队列中-待同步代码完毕-轮询执行异步队列中函数。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结-js是单线程-同时只做一件事-原因是为了避免dom渲染冲突。异步是一种解决方案-具体的实现就是event-loop。同步代码直接执行-异步代码先放在异步队列中-待同步代码完毕-轮询执行异步队列中函数。"}},[t._v("#")]),t._v(" 总结：JS是单线程，同时只做一件事，原因是为了避免DOM渲染冲突。异步是一种解决方案，具体的实现就是Event Loop。同步代码直接执行，异步代码先放在异步队列中，待同步代码完毕，轮询执行异步队列中函数。")]),t._v(" "),s("h4",{attrs:{id:"异步任务又可以分为两种-micro-tast-微任务-和macro-tast-宏任务-。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#异步任务又可以分为两种-micro-tast-微任务-和macro-tast-宏任务-。"}},[t._v("#")]),t._v(" 异步任务又可以分为两种，micro-tast(微任务)和macro-tast(宏任务)。")]),t._v(" "),s("ol",[s("li",[s("h5",{attrs:{id:"初始化状态-执行stack为空。macro-tast-宏任务-队列中只有一个script脚本。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#初始化状态-执行stack为空。macro-tast-宏任务-队列中只有一个script脚本。"}},[t._v("#")]),t._v(" 初始化状态：执行stack为空。macro-tast(宏任务)队列中只有一个script脚本。")])]),t._v(" "),s("li",[s("h5",{attrs:{id:"script脚本被推入执行stack-同步代码执行-执行过程可以产生新的macro-task和micro-task-并且推入各自的队列中-script脚本执行完成-则会移除任务队列。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#script脚本被推入执行stack-同步代码执行-执行过程可以产生新的macro-task和micro-task-并且推入各自的队列中-script脚本执行完成-则会移除任务队列。"}},[t._v("#")]),t._v(" script脚本被推入执行stack，同步代码执行，执行过程可以产生新的macro-task和micro-task，并且推入各自的队列中，script脚本执行完成，则会移除任务队列。")])]),t._v(" "),s("li",[s("h5",{attrs:{id:"macro-task移除队列后-接着执行micro-task。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#macro-task移除队列后-接着执行micro-task。"}},[t._v("#")]),t._v(" macro-task移除队列后，接着执行micro-task。")])]),t._v(" "),s("li",[s("h5",{attrs:{id:"执行ui渲染操作-更新界面。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#执行ui渲染操作-更新界面。"}},[t._v("#")]),t._v(" 执行UI渲染操作，更新界面。")])]),t._v(" "),s("li",[s("h5",{attrs:{id:"继续执行下一个宏任务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#继续执行下一个宏任务"}},[t._v("#")]),t._v(" 继续执行下一个宏任务")])])]),t._v(" "),s("h4",{attrs:{id:"注意-macro-task是一个个执行的-而micro-task是一队一对执行。因此-处理micro会逐个执行-直至队列被清空。每个macro-task之间会进行render"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#注意-macro-task是一个个执行的-而micro-task是一队一对执行。因此-处理micro会逐个执行-直至队列被清空。每个macro-task之间会进行render"}},[t._v("#")]),t._v(" 注意：macro-task是一个个执行的，而micro-task是一队一对执行。因此，处理micro会逐个执行，直至队列被清空。每个macro-task之间会进行render")]),t._v(" "),s("h4",{attrs:{id:"拓展知识-vue中nexttick原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#拓展知识-vue中nexttick原理"}},[t._v("#")]),t._v(" 拓展知识：Vue中nextTick原理")]),t._v(" "),s("h5",{attrs:{id:"定义-在下次dom更新循环结束之后执行的延迟回调。在修改数据之后立即使用该方法-获取更新后的dom。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#定义-在下次dom更新循环结束之后执行的延迟回调。在修改数据之后立即使用该方法-获取更新后的dom。"}},[t._v("#")]),t._v(" 定义：在下次DOM更新循环结束之后执行的延迟回调。在修改数据之后立即使用该方法，获取更新后的DOM。")]),t._v(" "),s("h5",{attrs:{id:"原理-vue在更新dom时是异步执行的。只要侦听到数据变化-vue将开启一个队列-并缓冲在同一事件循环中发生的所有数据变更。如果同一个watcher被多次触发-只会被推入到队列中一次。这种缓冲时去除重复数据对于避免不必要的计算和dom操作是非常重要的。而后-在下一个事件循环-tick-中-vue刷新队列并执行-已去重-工作。vue在内部对异步队列优先尝试使用微任务-promise-then、mutationobserver和setimmediate。如果执行环境不支持-则会采用宏任务-settimeout代替。nexttick接受一个函数-将这个函数cb的形式放到任务队列中-以微任务优先-当每次tick结束之后就会去执行这些cb。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原理-vue在更新dom时是异步执行的。只要侦听到数据变化-vue将开启一个队列-并缓冲在同一事件循环中发生的所有数据变更。如果同一个watcher被多次触发-只会被推入到队列中一次。这种缓冲时去除重复数据对于避免不必要的计算和dom操作是非常重要的。而后-在下一个事件循环-tick-中-vue刷新队列并执行-已去重-工作。vue在内部对异步队列优先尝试使用微任务-promise-then、mutationobserver和setimmediate。如果执行环境不支持-则会采用宏任务-settimeout代替。nexttick接受一个函数-将这个函数cb的形式放到任务队列中-以微任务优先-当每次tick结束之后就会去执行这些cb。"}},[t._v("#")]),t._v(' 原理：Vue在更新DOM时是异步执行的。只要侦听到数据变化，Vue将开启一个队列，并缓冲在同一事件循环中发生的所有数据变更。如果同一个watcher被多次触发，只会被推入到队列中一次。这种缓冲时去除重复数据对于避免不必要的计算和DOM操作是非常重要的。而后，在下一个事件循环"tick"中，Vue刷新队列并执行(已去重)工作。Vue在内部对异步队列优先尝试使用微任务: Promise.then、MutationObserver和setImmediate。如果执行环境不支持，则会采用宏任务: setTimeout代替。nextTick接受一个函数，将这个函数cb的形式放到任务队列中(以微任务优先)，当每次tick结束之后就会去执行这些cb。')])])}),[],!1,null,null,null);a.default=e.exports}}]);